--- a/emdx/ui/modals.py
+++ b/emdx/ui/modals.py
@@ -8,6 +8,13 @@ from textual.containers import Grid
 from textual.screen import ModalScreen
 from textual.widgets import Button, Label
 
+import logging
+
+# Set up logging for debugging
+logger = logging.getLogger(__name__)
+key_logger = logging.getLogger("key_events")
+
+
 
 class DeleteConfirmScreen(ModalScreen):
     """Modal screen for delete confirmation."""
@@ -50,6 +57,7 @@ class DeleteConfirmScreen(ModalScreen):
         super().__init__()
         self.doc_id = doc_id
         self.doc_title = doc_title
+        logger.info(f"DeleteConfirmScreen initialized for doc #{doc_id}: {doc_title}")
 
     def compose(self) -> ComposeResult:
         with Grid(id="dialog"):
@@ -62,13 +70,30 @@ class DeleteConfirmScreen(ModalScreen):
             yield Button("Delete (y)", variant="error", id="delete")
 
     def on_button_pressed(self, event: Button.Pressed) -> None:
+        logger.info(f"Button pressed: {event.button.id}")
         if event.button.id == "delete":
             self.dismiss(True)
         else:
             self.dismiss(False)
 
     def action_confirm_delete(self) -> None:
+        logger.info("action_confirm_delete called")
         self.dismiss(True)
 
     def action_cancel(self) -> None:
+        logger.info("action_cancel called")
         self.dismiss(False)
+
+    def on_mount(self) -> None:
+        """Ensure modal has focus when mounted."""
+        logger.info("DeleteConfirmScreen mounted")
+        self.focus()
+
+    def on_key(self, event) -> None:
+        """Log key events for debugging."""
+        key_logger.info(f"DeleteConfirmScreen.on_key: key={event.key}, character={event.character}")
+        # Don't consume the event - let bindings handle it
+        # Important: Don't call event.stop() or event.prevent_default() here
+        # as that would prevent the bindings from working
+        
+--- a/emdx/ui/main_browser.py
+++ b/emdx/ui/main_browser.py
@@ -986,6 +986,7 @@ class MinimalDocumentBrowser(App):
 
     def action_delete(self):
+        logger.info(f"action_delete called, mode={self.mode}, current_doc_id={self.current_doc_id}")
         if self.mode == "SEARCH" or not self.current_doc_id:
             return
 
@@ -994,6 +995,7 @@ class MinimalDocumentBrowser(App):
             doc = self.filtered_docs[table.cursor_row]
 
             def check_delete(should_delete: bool) -> None:
+                logger.info(f"check_delete callback called with: {should_delete}")
                 if should_delete:
                     result = subprocess.run(
                         [
@@ -1009,6 +1011,12 @@ class MinimalDocumentBrowser(App):
                     if result.returncode == 0:
                         self.load_documents()
                         self.filter_documents(self.search_query)
+                        status = self.query_one("#status", Label)
+                        status.update(f"Document #{self.current_doc_id} deleted")
+                else:
+                    status = self.query_one("#status", Label)
+                    status.update("Delete cancelled")
 
+            logger.info(f"Pushing DeleteConfirmScreen for doc #{doc['id']}: {doc['title']}")
             self.push_screen(DeleteConfirmScreen(doc["id"], doc["title"]), check_delete)